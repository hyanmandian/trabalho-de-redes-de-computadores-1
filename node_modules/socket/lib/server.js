'use strict';

let net = require('net');
let EventEmitter = require('events').EventEmitter;

class Server extends EventEmitter {
    
    constructor() {
        
        super();
        this.connections = [];
        this.maxConnections = null; 
       
    }
    
    createServer(port, host) {
    
        let self = this;
        
        this.server = net.createServer((connection) => {
            
            if(this.maxConnections !== null) {
                this.server.maxConnections = this.maxConnections;
            }
            
            self.connections.push(connection);
            
            self.emit('connection', connection);    
            
            connection.on('end', () => {
                self.emit('disconnect');
                self.connections.splice(self.connections.indexOf(connection), 1);
            }).on('data', (data) => {
                self.emit('data', data.toString(), connection);
            }).on('error', (err) => {
                self.emit('error', err); 
            }).on('close', () => {
                self.emit('close');
            });
    
        }).listen(port, host);
        
        return this;
        
    }
    
    isConnected(connection) {
        
        return this.connections.indexOf(connection) == -1 ? false : true;
        
    }
    
}

module.exports = new Server();